import os
import requests
import logging
import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.error import TelegramError, Forbidden, BadRequest
from telegram.constants import ParseMode
from dotenv import load_dotenv

# Logging рд╕реЗрдЯрдЕрдк
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# .env рдлрд╝рд╛рдЗрд▓ рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# --- CONFIGURATION ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
# тнР рдирдпрд╛ рдФрд░ рд╕рд╣реА API рдпрд╣рд╛рдБ рд▓рдЧрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ тнР
API_BASE_URL = os.getenv("API_BASE_URL", "https://encore.toxictanji0503.workers.dev/encoree?num=")
# тнР рджреВрд╕рд░рд╛ API рдпрд╣рд╛рдБ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ тнР
SECONDARY_API_URL = "https://encore.toxictanji0503.workers.dev/encoree?num="
try:
    # рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ: ADMIN_ID рдХреЛ .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ рд▓реЛрдб рдХрд░рдирд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╣реИред 
    # рдореИрдВрдиреЗ рдпрд╣рд╛рдБ рджреА рдЧрдИ ID (7524032836) рдХреЛ рд╣реА рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рд╣реИред
    ADMIN_ID = int(os.getenv("ADMIN_ID", "7524032836")) 
except (TypeError, ValueError):
    ADMIN_ID = None
    logger.error("ADMIN_ID is missing or invalid in .env file.")

# Settings
DAILY_CREDITS_LIMIT = 3
REFERRAL_CREDITS = 1 # 1 рдХреНрд░реЗрдбрд┐рдЯ рдкреНрд░рддрд┐ рд░реЗрдлрд░рд▓
SUPPORT_CHANNEL_USERNAME = "narzoxbot"
SUPPORT_CHANNEL_LINK = "https://t.me/narzoxbot"
# тнР рдпрд╣рд╛рдВ рдирдпрд╛ Owner Username рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ тнР
ADMIN_USERNAME_FOR_ACCESS = "Narzoceo" 
DATA_FILE = "bot_data.json"
BANNED_USERS_FILE = "banned_users.json"
# ---------------------

# --- GLOBAL STORAGE ---
USER_CREDITS = {}
USERS = set()
REFERRED_TRACKER = set()
UNLIMITED_USERS = {}  # {user_id: expiry_timestamp or "forever"}
BANNED_USERS = set()
USER_SEARCH_HISTORY = {}  # {user_id: [searches]}
DAILY_STATS = {"searches": 0, "new_users": 0, "referrals": 0}
# -----------------------------------------------------------------

def load_data():
    """JSON рдлрд╛рдЗрд▓ рд╕реЗ рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░реЗрдВ"""
    global USER_CREDITS, USERS, REFERRED_TRACKER, UNLIMITED_USERS, USER_SEARCH_HISTORY, DAILY_STATS
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                USER_CREDITS = {int(k): v for k, v in data.get('credits', {}).items()}
                USERS = set(data.get('users', []))
                REFERRED_TRACKER = set(tuple(int(item) for item in x) if isinstance(x, (list, tuple)) else tuple(x) for x in data.get('referrals', []))
                UNLIMITED_USERS = {int(k): v for k, v in data.get('unlimited', {}).items()}
                USER_SEARCH_HISTORY = {int(k): v for k, v in data.get('search_history', {}).items()}
                DAILY_STATS = data.get('daily_stats', {"searches": 0, "new_users": 0, "referrals": 0})
                logger.info(f"тЬЕ Data loaded: {len(USERS)} users, {len(UNLIMITED_USERS)} unlimited users")
    except Exception as e:
        logger.error(f"тЭМ Error loading data: {e}")

def save_data():
    """JSON рдлрд╛рдЗрд▓ рдореЗрдВ рдбреЗрдЯрд╛ рд╕реЗрд╡ рдХрд░реЗрдВ"""
    try:
        data = {
            'credits': USER_CREDITS,
            'users': list(USERS),
            'referrals': [list(x) for x in REFERRED_TRACKER], 
            'unlimited': UNLIMITED_USERS,
            'search_history': USER_SEARCH_HISTORY,
            'daily_stats': DAILY_STATS,
            'last_updated': datetime.now().isoformat()
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"тЭМ Error saving data: {e}")

def load_banned_users():
    """рдмреИрди рдХрд┐рдП рдЧрдП рдпреВрдЬрд░реНрд╕ рд▓реЛрдб рдХрд░реЗрдВ"""
    global BANNED_USERS
    try:
        if os.path.exists(BANNED_USERS_FILE):
            with open(BANNED_USERS_FILE, 'r') as f:
                BANNED_USERS = set(int(uid) for uid in json.load(f))
    except Exception as e:
        logger.error(f"Error loading banned users: {e}")

def save_banned_users():
    """рдмреИрди рдХрд┐рдП рдЧрдП рдпреВрдЬрд░реНрд╕ рд╕реЗрд╡ рдХрд░реЗрдВ"""
    try:
        with open(BANNED_USERS_FILE, 'w') as f:
            json.dump(list(BANNED_USERS), f)
    except Exception as e:
        logger.error(f"Error saving banned users: {e}")

def get_credits(user_id: int) -> int:
    """рдпреВрдЬрд░ рдХреЗ рд╡рд░реНрддрдорд╛рди рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ"""
    if is_unlimited(user_id):
        return float('inf')
    
    if user_id not in USER_CREDITS:
        USER_CREDITS[user_id] = DAILY_CREDITS_LIMIT
        save_data()
    
    return USER_CREDITS.get(user_id, 0)

def is_unlimited(user_id: int) -> bool:
    """рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдпреВрдЬрд░ рдХреЗ рдкрд╛рд╕ рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕ рд╣реИ рдпрд╛ рдирд╣реАрдВ"""
    if user_id == ADMIN_ID:
        return True
    
    if user_id not in UNLIMITED_USERS:
        return False
    
    expiry = UNLIMITED_USERS[user_id]
    
    if expiry == "forever":
        return True
    
    if isinstance(expiry, (int, float)):
        if datetime.now().timestamp() < expiry:
            return True
        else:
            del UNLIMITED_USERS[user_id]
            save_data()
            return False
    
    return False

def get_unlimited_expiry_text(user_id: int) -> str:
    """рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕рдкрд╛рдпрд░реА рдХрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдкрд╛рдПрдВ"""
    if user_id not in UNLIMITED_USERS:
        return ""
    
    expiry = UNLIMITED_USERS[user_id]
    
    if expiry == "forever":
        return "рд╣рдореЗрд╢рд╛ рдХреЗ рд▓рд┐рдП тЩ╛я╕П"
    
    if not isinstance(expiry, (int, float)):
        return "рдЕрдЬреНрдЮрд╛рдд рдЕрд╡рдзрд┐"

    expiry_date = datetime.fromtimestamp(expiry)
    remaining = expiry_date - datetime.now()
    
    if remaining.days > 0:
        return f"{remaining.days} рджрд┐рди рдмрд╛рдХреА"
    elif remaining.total_seconds() > 3600:
        hours = int(remaining.total_seconds() // 3600)
        return f"{hours} рдШрдВрдЯреЗ рдмрд╛рдХреА"
    elif remaining.total_seconds() > 0:
        minutes = int(remaining.total_seconds() // 60)
        return f"{minutes} рдорд┐рдирдЯ рдмрд╛рдХреА"
    else:
        return "рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИ ЁЯЫС"


def get_referral_link(bot_username: str, user_id: int) -> str:
    """рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рдмрдирд╛рдПрдВ"""
    return f"https://t.me/{bot_username}?start=ref_{user_id}"

def save_user(user_id: int) -> None:
    """рдпреВрдЬрд░ ID рд╕реЗрд╡ рдХрд░реЗрдВ"""
    if user_id not in USERS:
        USERS.add(user_id)
        DAILY_STATS["new_users"] += 1
        save_data()

def add_search_history(user_id: int, number: str) -> None:
    """рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ"""
    if user_id not in USER_SEARCH_HISTORY:
        USER_SEARCH_HISTORY[user_id] = []
    
    USER_SEARCH_HISTORY[user_id].append({
        "number": number,
        "timestamp": datetime.now().isoformat()
    })
    
    # рдХреЗрд╡рд▓ рдЖрдЦрд┐рд░реА 50 рд╕рд░реНрдЪ рд░рдЦреЗрдВ
    if len(USER_SEARCH_HISTORY[user_id]) > 50:
        USER_SEARCH_HISTORY[user_id] = USER_SEARCH_HISTORY[user_id][-50:]
    
    DAILY_STATS["searches"] += 1
    save_data()

async def check_channel_membership(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдпреВрдЬрд░ рдЪреИрдирд▓ рдХрд╛ рдореЗрдВрдмрд░ рд╣реИ рдпрд╛ рдирд╣реАрдВ"""
    try:
        member = await context.bot.get_chat_member(f"@{SUPPORT_CHANNEL_USERNAME}", user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Forbidden:
        return False
    except TelegramError as e:
        logger.error(f"Error checking membership for {user_id}: {e}")
        return False

async def force_channel_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """рдпреВрдЬрд░ рдХреЛ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣реЗрдВ"""
    user_id = update.effective_user.id
    
    # Admin рдФрд░ Unlimited users рдХреЛ bypass рджреЗрдВ
    if user_id == ADMIN_ID or (user_id in UNLIMITED_USERS and is_unlimited(user_id)):
        return True
    
    is_member = await check_channel_membership(user_id, context)
    
    if not is_member:
        keyboard = [
            [InlineKeyboardButton("ЁЯУв рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ", url=SUPPORT_CHANNEL_LINK)],
            [InlineKeyboardButton("тЬЕ рдореИрдВрдиреЗ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдпрд╛", callback_data='check_membership')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "ЁЯФТ **рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рдХреЛ рдЬреНрд╡рд╛рдЗрди рдХрд░рдирд╛ рд╣реЛрдЧрд╛!**\n\n"
            "тЬи **рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░рдиреЗ рдХреЗ рдлрд╛рдпрджреЗ:**\n"
            "тАв рдирдИ рдЕрдкрдбреЗрдЯреНрд╕ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдкрд╛рдПрдВ\n"
            "тАв рд╕реНрдкреЗрд╢рд▓ рдСрдлрд░реНрд╕ рдФрд░ рдмреЛрдирд╕ рдХреНрд░реЗрдбрд┐рдЯреНрд╕\n"
            "тАв рдкреНрд░реАрдорд┐рдпрдо рдлреАрдЪрд░реНрд╕ рдХрд╛ рдПрдХреНрд╕реЗрд╕\n\n"
            "рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ рдФрд░ рдлрд┐рд░ 'тЬЕ рдореИрдВрдиреЗ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдпрд╛' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред"
        )
        
        try:
            if update.message:
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            elif update.callback_query:
                await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        except BadRequest:
            pass
        
        return False
    
    return True

def is_banned(user_id: int) -> bool:
    """рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдпреВрдЬрд░ рдмреИрди рд╣реИ рдпрд╛ рдирд╣реАрдВ"""
    return user_id in BANNED_USERS

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "friend"
    bot_username = context.bot.username
    
    # рдмреИрди рдЪреЗрдХ
    if is_banned(user_id):
        await update.message.reply_text(
            "ЁЯЪл **рдЖрдк рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рд╕реЗ рдмреИрди рд╣реИрдВред**\n\n"
            "рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╕рдкреЛрд░реНрдЯ рдЪреИрдирд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
        )
        return
    
    save_user(user_id)
    
    # рдЪреИрдирд▓ рдореЗрдВрдмрд░рд╢рд┐рдк рдЪреЗрдХ рдХрд░реЗрдВ
    if not await force_channel_join(update, context):
        return
    
    # рд░реЗрдлрд░рд▓ рд▓реЙрдЬрд┐рдХ
    referral_success = False
    if context.args and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0].split('_')[1])
            referral_key = (referrer_id, user_id)
            
            if referrer_id != user_id and referral_key not in REFERRED_TRACKER and referrer_id not in BANNED_USERS:
                if referrer_id in USERS:
                    if not is_unlimited(referrer_id):
                        USER_CREDITS[referrer_id] = USER_CREDITS.get(referrer_id, 0) + REFERRAL_CREDITS
                    
                    REFERRED_TRACKER.add(referral_key)
                    DAILY_STATS["referrals"] += 1
                    save_data()
                    
                    referrer_credits = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unlimited(referrer_id) else USER_CREDITS[referrer_id]
                    
                    try:
                        await context.bot.send_message(
                            chat_id=referrer_id,
                            text=f"ЁЯе│ **рдмрдзрд╛рдИ рд╣реЛ!** ЁЯОЙ\n\n"
                                f"ЁЯСд **{username}** рдиреЗ рдЖрдкрдХреЗ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рд╕реЗ рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рд╣реИред\n"
                                f"ЁЯОБ рдЖрдкрдХреЛ **{REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ** рдорд┐рд▓реЗ рд╣реИрдВ!\n"
                                f"ЁЯТ░ **рдЖрдкрдХреЗ рдХреБрд▓ рдХреНрд░реЗрдбрд┐рдЯ:** {referrer_credits}",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except:
                        pass
                    
                    referral_success = True
                    await update.message.reply_text(
                        f"тЬЕ **рд╕реНрд╡рд╛рдЧрдд рд╣реИ!** ЁЯОК\n\n"
                        f"рдЖрдкрдиреЗ рд░реЗрдлрд░рд▓ рдХреЗ рдЬрд╝рд░рд┐рдП рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рд╣реИред\n"
                        f"рдЖрдкрдХреЛ **{DAILY_CREDITS_LIMIT}** рд╢реБрд░реБрдЖрддреА рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗ рд╣реИрдВред ЁЯОБ"
                    )
        except Exception as e:
            logger.error(f"Referral Error: {e}")
    
    # рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ (Start Menu Logic)
    current_credits = get_credits(user_id)
    is_unli = is_unlimited(user_id)
    credit_text = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unli else str(current_credits)
    
    keyboard = [
        [
            InlineKeyboardButton("ЁЯФН рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░реЗрдВ", callback_data='how_to_search'),
            InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", callback_data='get_referral_link')
        ],
        [
            InlineKeyboardButton(f"ЁЯТ░ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ ({credit_text})", callback_data='show_credits'),
            InlineKeyboardButton("ЁЯУК рдореЗрд░реА рд░реЗрдлрд░рд▓", callback_data='my_referrals')
        ],
        # тнР рдпрд╣рд╛рдВ рдирдпрд╛ Unlimited Access рдмрдЯрди рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ тнР
        [
            InlineKeyboardButton("ЁЯУЬ рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА", callback_data='search_history'),
            InlineKeyboardButton("ЁЯСС рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕", callback_data='buy_unlimited_access') 
        ],
        [
            InlineKeyboardButton("ЁЯУв Support Channel", url=SUPPORT_CHANNEL_LINK)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    unlimited_badge = " ЁЯСС" if is_unli else ""
    expiry_text = ""
    if is_unli and user_id != ADMIN_ID:
        expiry_text = f"\nтП░ **рд╡реИрд▓рд┐рдбрд┐рдЯреА:** {get_unlimited_expiry_text(user_id)}"
    
    if not referral_success:
        welcome_message = (
            f"ЁЯдЦ **рдирдорд╕реНрддреЗ {username}{unlimited_badge}!**\n"
            f"рдореИрдВ рдЖрдкрдХрд╛ рдПрдбрд╡рд╛рдВрд╕реНрдб рдирдВрдмрд░ рд╕рд░реНрдЪ рдмреЙрдЯ рд╣реВрдБред ЁЯЪА\n\n"
            f"ЁЯТО **рдЖрдкрдХреЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕:** {credit_text}{expiry_text}\n\n"
            "тЬи **рдореБрдЦреНрдп рдлреАрдЪрд░реНрд╕:**\n"
            "тАв ЁЯФН рдХрд┐рд╕реА рднреА рдирдВрдмрд░ рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА\n"
            f"тАв ЁЯОБ рд░реЗрдлрд░рд▓ рдХрд░рдХреЗ рдлреНрд░реА рдХреНрд░реЗрдбрд┐рдЯ ({REFERRAL_CREDITS} / рд░реЗрдлрд░рд▓)\n"
            "тАв ЁЯУК рдЕрдкрдиреА рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА рджреЗрдЦреЗрдВ\n"
            "тАв тЪб рддреЗрдЬрд╝ рдФрд░ рд╕рдЯреАрдХ рд░рд┐рдЬрд▓реНрдЯреНрд╕\n\n"
            "ЁЯСЗ **рд╢реБрд░реБрдЖрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХреЗ рдмрдЯрди рджрдмрд╛рдПрдВ**"
        )
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/search рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░ (рдорд▓реНрдЯреА-API рдлрд╝реЙрд▓рдмреИрдХ рдХреЗ рд╕рд╛рде рдЕрджреНрдпрддрди)"""
    user_id = update.effective_user.id
    save_user(user_id)
    
    # рдмреИрди рдЪреЗрдХ
    if is_banned(user_id):
        await update.message.reply_text("ЁЯЪл рдЖрдк рдмреИрди рд╣реИрдВред")
        return
    
    # рдЪреИрдирд▓ рдореЗрдВрдмрд░рд╢рд┐рдк рдЪреЗрдХ
    if not await force_channel_join(update, context):
        return
    
    current_credits = get_credits(user_id)
    is_unli = is_unlimited(user_id)
    
    # рдХреНрд░реЗрдбрд┐рдЯ рдЪреЗрдХ
    if not is_unli and current_credits <= 0:
        keyboard = [
            [InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", callback_data='get_referral_link')],
            [InlineKeyboardButton("ЁЯСС рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕", callback_data='buy_unlimited_access')] 
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "ЁЯЫС **рдХреНрд░реЗрдбрд┐рдЯ рдЦрддреНрдо рд╣реЛ рдЧрдП!** ЁЯШФ\n\n"
            "рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрднреА **0 рдХреНрд░реЗрдбрд┐рдЯ** рд╣реИрдВред\n\n"
            "**рдХреНрд░реЗрдбрд┐рдЯ рдХреИрд╕реЗ рдкрд╛рдПрдВ:**\n"
            f"1я╕ПтГг рджреЛрд╕реНрддреЛрдВ рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ (+{REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рд╣рд░ рд░реЗрдлрд░рд▓)\n"
            "2я╕ПтГг рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕ рдХреЗ рд▓рд┐рдП рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\n\n"
            "ЁЯСЗ **рдиреАрдЪреЗ рдХреЗ рдмрдЯрди рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ**",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "тЪая╕П **рдЧрд▓рдд рддрд░реАрдХрд╛!**\n\n"
            "рдХреГрдкрдпрд╛ `/search` рдХреЗ рдмрд╛рдж рдПрдХ рдирдВрдмрд░ рджреЗрдВред\n\n"
            "**рд╕рд╣реА рддрд░реАрдХрд╛:**\n"
            "`/search 979842655`\n\n"
            "**рдпрд╛ рд╕реАрдзреЗ рдирдВрдмрд░ рднреЗрдЬреЗрдВ aage /search 839393939:**\n"
            "`83839 no `",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    num = context.args[0].strip().replace("+91", "").replace(" ", "").replace("-", "")
    
    # рдирдВрдмрд░ рд╡реИрд▓рд┐рдбреЗрд╢рди
    if not num.isdigit():
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ рдХреЗрд╡рд▓ рдирдВрдмрд░ рджреЗрдВред рдХреЛрдИ рдЕрдХреНрд╖рд░ рдпрд╛ рд╕реНрдкреЗрд╢рд▓ рдХреИрд░реЗрдХреНрдЯрд░ рди рдбрд╛рд▓реЗрдВред")
        return
    
    if len(num) < 10:
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ рдХрдо рд╕реЗ рдХрдо 10 рдЕрдВрдХреЛрдВ рдХрд╛ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рджреЗрдВред")
        return
    
    credit_msg = "" if is_unli else " (1 рдХреНрд░реЗрдбрд┐рдЯ рд▓рдЧреЗрдЧрд╛)"
    searching_msg = await update.message.reply_text(
        f"ЁЯФН **рд╕рд░реНрдЪ рд╣реЛ рд░рд╣реА рд╣реИ...**\n"
        f"ЁЯУ▒ рдирдВрдмрд░: `{num}`{credit_msg}\n\n"
        "тП│ рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    user_data = None
    source_api_name = None
    
    # --- 1. Primary API Search (https://encore.sahilraz9265.workers.dev/numbr?num=) ---
    primary_api_url = f"{API_BASE_URL}{num}"
    try:
        response = requests.get(primary_api_url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'data' in data and isinstance(data['data'], list) and len(data['data']) > 0:
            user_data = data['data'][0] 
            source_api_name = "Primary"
        elif isinstance(data, dict) and any(data.values()):
            user_data = data 
            source_api_name = "Primary"

    except Exception as e:
        logger.warning(f"Primary API failed or returned empty for {num}: {e}")
        # Secondary API рдкрд░ рдЬрд╛рд░реА рд░рдЦреЗрдВ

    # --- 2. Secondary API Search (https://taitan.mastimusicboxabd01.workers.dev/?mobile=) ---
    if not user_data:
        secondary_api_url = f"{SECONDARY_API_URL}{num}"
        try:
            response = requests.get(secondary_api_url, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            # JSON рд╕рдВрд░рдЪрдирд╛ primary API рдЬреИрд╕реА рдорд╛рдиреА рдЧрдИ рд╣реИ
            if 'data' in data and isinstance(data['data'], list) and len(data['data']) > 0:
                user_data = data['data'][0] 
                source_api_name = "Secondary"
            elif isinstance(data, dict) and any(data.values()):
                user_data = data
                source_api_name = "Secondary"

        except Exception as e:
            logger.error(f"Secondary API failed for {num}: {e}")
            # рдХреЛрдИ рдФрд░ API рдирд╣реАрдВ, рдЖрдЧреЗ рдмрдврд╝реЗрдВ

    # --- 3. Process Result (If data found from either API) ---
    if user_data:
        # рдХреНрд░реЗрдбрд┐рдЯ рдШрдЯрд╛рдПрдВ (рдХреЗрд╡рд▓ рд╕рдлрд▓ рд╕рд░реНрдЪ рдкрд░)
        if not is_unli:
            USER_CREDITS[user_id] -= 1
            save_data()
        
        # рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ
        add_search_history(user_id, num)
        
        response_message = f"тЬЕ **рдЬрд╛рдирдХрд╛рд░реА рдорд┐рд▓ рдЧрдИ!** ЁЯОЙ (Source: {source_api_name})\n\n"
        
        # рдХреБрдЫ keys рдХреЛ ignore рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдЕрдЧрд░ рд╡реЗ API рдореЗрдВ рдмреЗрдХрд╛рд░ рд╣реЛрдВ рдпрд╛ рдПрдбрдорд┐рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рд╣реЛ
        keys_to_ignore = ['api_owner', 'developer', 'id']
        
        response_message += "ЁЯУЛ **рд╡рд┐рд╡рд░рдг:**\n"
        
        # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг keys рдкрд╣рд▓реЗ рдЖрдПрдВ
        key_order = ['name', 'mobile', 'fname', 'address', 'circle']
        
        # Process required keys first
        for key in key_order:
            value = user_data.get(key)
            if value and str(value).strip():
                clean_key = key.replace('_', ' ').title()
                # Emoji рдЬреЛрдбрд╝реЗрдВ
                emoji = "ЁЯУМ"
                if 'name' in key.lower() or 'fname' in key.lower(): emoji = "ЁЯСд"
                elif 'mobile' in key.lower() or 'phone' in key.lower(): emoji = "ЁЯУ▒"
                elif 'address' in key.lower(): emoji = "ЁЯПа"
                elif 'circle' in key.lower(): emoji = "ЁЯУб"
                
                response_message += f"{emoji} **{clean_key}:** `{value}`\n"

        # Process remaining keys
        for key, value in user_data.items():
            if key not in keys_to_ignore and key not in key_order and value and str(value).strip():
                clean_key = key.replace('_', ' ').title()
                emoji = "тЬи" # Default emoji for other keys
                response_message += f"{emoji} **{clean_key}:** `{value}`\n"
        
        remaining_credits = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unli else USER_CREDITS[user_id]
        response_message += f"\nЁЯТ░ **рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА:** {remaining_credits}"
        
        if not is_unli and USER_CREDITS[user_id] <= 2:
            response_message += f"\n\nтЪая╕П **рдХрдо рдХреНрд░реЗрдбрд┐рдЯ!** рджреЛрд╕реНрддреЛрдВ рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ рдФрд░ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдкрд╛рдПрдВ!"
        
        await searching_msg.edit_text(response_message, parse_mode=ParseMode.MARKDOWN)
    
    else:
        # 4. Final Failure Message
        remaining_credits = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unli else USER_CREDITS[user_id]
        await searching_msg.edit_text(
            f"тЭМ **рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реА**\n\n"
            f"ЁЯУ▒ рдирдВрдмрд░: `{num}`\n"
            f"рдЗрд╕ рдирдВрдмрд░ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рднреА рд╕рд░реНрд╡рд┐рд╕ рд╕реЗ рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред\n\n"
            f"ЁЯТ░ **рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдмрд╛рдХреА:** {remaining_credits}",
            parse_mode=ParseMode.MARKDOWN
        )

# --- Admin Commands (No change needed here, already supports unlimited) ---

async def unlimited_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдХрд┐рд╕реА рдпреВрдЬрд░ рдХреЛ рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕ рджреЗрдВ (рдПрдбрдорд┐рди рдУрдирд▓реА)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text(
            "ЁЯУЭ **Unlimited Access Command**\n\n"
            "**Usage:**\n"
            "`/unlimited <user_id> [time]`\n\n"
            "**Examples:**\n"
            "тАв `/unlimited 123456789` тЮЬ Forever\n"
            "тАв `/unlimited 123456789 7d` тЮЬ 7 Days\n"
            "тАв `/unlimited 123456789 1m` тЮЬ 1 Month\n",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("тЭМ Invalid User ID. Please provide a valid number.")
        return
    
    expiry = "forever"
    duration_text = "рд╣рдореЗрд╢рд╛ рдХреЗ рд▓рд┐рдП тЩ╛я╕П"
    
    if len(context.args) > 1:
        time_str = context.args[1].lower()
        try:
            if time_str.endswith('h'):
                hours = int(time_str[:-1])
                expiry = (datetime.now() + timedelta(hours=hours)).timestamp()
                duration_text = f"{hours} рдШрдВрдЯреЗ"
            elif time_str.endswith('d'):
                days = int(time_str[:-1])
                expiry = (datetime.now() + timedelta(days=days)).timestamp()
                duration_text = f"{days} рджрд┐рди"
            elif time_str.endswith('m'):
                months = int(time_str[:-1])
                expiry = (datetime.now() + timedelta(days=months*30)).timestamp() 
                duration_text = f"{months} рдорд╣реАрдиреЗ"
            else:
                await update.message.reply_text("тЭМ Invalid time format. Use: 1h, 7d, 1m, etc.")
                return
        except ValueError:
            await update.message.reply_text("тЭМ Invalid time value.")
            return
    
    UNLIMITED_USERS[target_user_id] = expiry
    save_data()
    
    keyboard = [
        [InlineKeyboardButton("ЁЯУК View All Unlimited Users", callback_data='admin_unlimited_list')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"тЬЕ **Unlimited Access Granted!** ЁЯСС\n\n"
        f"ЁЯСд **User ID:** `{target_user_id}`\n"
        f"тП░ **Duration:** {duration_text}\n"
        f"ЁЯУЕ **Date:** {datetime.now().strftime('%d-%m-%Y %H:%M')}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"ЁЯОЙ **рдмрдзрд╛рдИ рд╣реЛ!** ЁЯСС\n\n"
                f"рдЖрдкрдХреЛ **Unlimited Search Access** рдорд┐рд▓ рдЧрдпрд╛ рд╣реИ!\n"
                f"тП░ **рдЕрд╡рдзрд┐:** {duration_text}\n\n"
                f"рдЕрдм рдЖрдк рдмрд┐рдирд╛ рдХрд┐рд╕реА рд▓рд┐рдорд┐рдЯ рдХреЗ рд╕рд░реНрдЪ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ! ЁЯЪА",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.warning(f"Could not notify user {target_user_id} about unlimited access: {e}")

async def remove_unlimited_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдХрд┐рд╕реА рдпреВрдЬрд░ рдХрд╛ рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕ рд╣рдЯрд╛рдПрдВ (рдПрдбрдорд┐рди рдУрдирд▓реА)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    if not context.args:
        await update.message.reply_text(
            "ЁЯУЭ **Usage:** `/remove_unlimited <user_id>`\n\n"
            "**Example:** `/remove_unlimited 123456789`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("тЭМ Invalid User ID.")
        return
    
    if target_user_id in UNLIMITED_USERS:
        del UNLIMITED_USERS[target_user_id]
        save_data()
        await update.message.reply_text(
            f"тЬЕ **Unlimited Access Removed**\n\n"
            f"User `{target_user_id}` рдХрд╛ unlimited access рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            if target_user_id not in USER_CREDITS:
                 USER_CREDITS[target_user_id] = DAILY_CREDITS_LIMIT
                 save_data()
            
            await context.bot.send_message(
                chat_id=target_user_id,
                text="тЪая╕П рдЖрдкрдХрд╛ **Unlimited Access** рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред\n\n"
                    f"рдЕрдм рдЖрдк normal credits ({USER_CREDITS.get(target_user_id, 0)} рдХреНрд░реЗрдбрд┐рдЯреНрд╕) рдХреЗ рд╕рд╛рде рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
            )
        except:
            pass
    else:
        await update.message.reply_text(f"тЭМ User `{target_user_id}` рдХреЗ рдкрд╛рд╕ unlimited access рдирд╣реАрдВ рд╣реИред", parse_mode=ParseMode.MARKDOWN)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдмреЙрдЯ рдХреА рд╕реНрдЯреЗрдЯрд┐рд╕реНрдЯрд┐рдХреНрд╕ рджрд┐рдЦрд╛рдПрдВ (Admin Only)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    total_users = len(USERS)
    total_referrals = len(REFERRED_TRACKER)
    unlimited_users = len(UNLIMITED_USERS)
    banned_users = len(BANNED_USERS)
    total_searches = DAILY_STATS.get("searches", 0)
    
    # рдпрд╣ рд╕рд┐рд░реНрдл рдПрдХ рдЕрдиреБрдорд╛рдирд┐рдд рдЖрдВрдХрдбрд╝рд╛ рд╣реИ, рдЗрд╕реЗ рд╕рдЯреАрдХ рд░реВрдк рд╕реЗ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХ complex logic рдЪрд╛рд╣рд┐рдП
    total_credits_used = sum(DAILY_CREDITS_LIMIT - USER_CREDITS.get(uid, 0) for uid in USERS if uid not in UNLIMITED_USERS)
    
    keyboard = [
        [
            InlineKeyboardButton("ЁЯСе Top Users", callback_data='admin_top_users'),
            InlineKeyboardButton("ЁЯСС Unlimited List", callback_data='admin_unlimited_list')
        ],
        [
            InlineKeyboardButton("ЁЯЪл Banned Users", callback_data='admin_banned_list'),
            InlineKeyboardButton("ЁЯФД Refresh", callback_data='admin_stats')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    stats_message = (
        "ЁЯУК **Bot Statistics Dashboard**\n"
        "тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n\n"
        f"ЁЯСе **Total Users:** {total_users}\n"
        f"ЁЯФЧ **Total Referrals:** {total_referrals}\n"
        f"ЁЯСС **Unlimited Users:** {unlimited_users}\n"
        f"ЁЯЪл **Banned Users:** {banned_users}\n"
        f"ЁЯФН **Total Searches (Since Start):** {total_searches}\n"
        f"ЁЯТ│ **Estimated Credits Used:** {total_credits_used}\n\n"
        f"ЁЯУЕ **Today's Stats:**\n"
        f"  тАв New Users: {DAILY_STATS.get('new_users', 0)}\n"
        f"  тАв Searches: {DAILY_STATS.get('searches', 0)}\n"
        f"  тАв Referrals: {DAILY_STATS.get('referrals', 0)}\n\n"
        f"тП░ **Last Update:** {datetime.now().strftime('%d-%m-%Y %H:%M')}"
    )
    
    await update.message.reply_text(stats_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рд╕рднреА рдпреВрдЬрд░реНрд╕ рдХреЛ рдореИрд╕реЗрдЬ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░реЗрдВ (Admin Only)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    if not context.args:
        await update.message.reply_text(
            "ЁЯУг **Broadcast Command**\n\n"
            "**Usage:** `/broadcast <message>`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    broadcast_message = " ".join(context.args)
    success_count = 0
    failure_count = 0
    blocked_count = 0
    
    status_msg = await update.message.reply_text(
        f"тП│ **Broadcasting...**\n\n"
        f"ЁЯСе Target Users: {len(USERS)}\n"
        f"тЬЕ Sent: 0\n"
        f"тЭМ Failed: 0"
    )
    
    for idx, chat_id in enumerate(USERS):
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"ЁЯУв **Broadcast Message**\n\n{broadcast_message}",
                parse_mode=ParseMode.MARKDOWN
            )
            success_count += 1
            
            if (idx + 1) % 50 == 0:
                await status_msg.edit_text(
                    f"тП│ **Broadcasting...**\n\n"
                    f"ЁЯСе Target Users: {len(USERS)}\n"
                    f"тЬЕ Sent: {success_count}\n"
                    f"тЭМ Failed: {failure_count}\n"
                    f"ЁЯУК Progress: {idx + 1}/{len(USERS)}"
                )
            
            if (idx + 1) % 30 == 0:
                await asyncio.sleep(1)
                
        except Forbidden:
            blocked_count += 1
            failure_count += 1
        except Exception as e:
            failure_count += 1
            logger.info(f"Failed to send to {chat_id}: {e}")
    
    final_message = (
        f"тЬЕ **Broadcast Complete!**\n\n"
        f"ЁЯУК **Results:**\n"
        f"тЬЕ Successfully Sent: {success_count}\n"
        f"тЭМ Failed: {failure_count}\n"
        f"ЁЯЪл Blocked Bot: {blocked_count}\n"
        f"ЁЯУИ Success Rate: {(success_count/len(USERS)*100 if len(USERS) > 0 else 0):.1f}%"
    )
    
    await status_msg.edit_text(final_message)

async def add_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдХрд┐рд╕реА рдпреВрдЬрд░ рдХреЛ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдЬреЛрдбрд╝реЗрдВ (Admin Only)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "ЁЯУЭ **Usage:** `/addcredits <user_id> <credits>`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        target_user_id = int(context.args[0])
        credits_to_add = int(context.args[1])
    except ValueError:
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ рдорд╛рдиреНрдп рдирдВрдмрд░ рджреЗрдВред")
        return
    
    if credits_to_add <= 0:
        await update.message.reply_text("тЭМ Credits 0 рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдПред")
        return
    
    if target_user_id not in USER_CREDITS:
        USER_CREDITS[target_user_id] = 0
    
    USER_CREDITS[target_user_id] += credits_to_add
    save_data()
    
    await update.message.reply_text(
        f"тЬЕ **Credits Added Successfully!**\n\n"
        f"ЁЯСд **User ID:** `{target_user_id}`\n"
        f"тЮХ **Added:** {credits_to_add} credits\n"
        f"ЁЯТ░ **New Total:** {USER_CREDITS[target_user_id]} credits",
        parse_mode=ParseMode.MARKDOWN
    )
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"ЁЯОЙ **Bonus Credits!**\n\n"
                f"рдЖрдкрдХреЛ **{credits_to_add} bonus credits** рдорд┐рд▓реЗ рд╣реИрдВ!\n"
                f"ЁЯТ░ **Total Credits:** {USER_CREDITS[target_user_id]}",
            parse_mode=ParseMode.MARKDOWN
        )
    except:
        pass

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдХрд┐рд╕реА рдпреВрдЬрд░ рдХреЛ рдмреИрди рдХрд░реЗрдВ (Admin Only)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    if not context.args:
        await update.message.reply_text(
            "ЁЯУЭ **Usage:** `/ban <user_id> [reason]`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("тЭМ Invalid User ID.")
        return
    
    reason = " ".join(context.args[1:]) if len(context.args) > 1 else "No reason provided"
    
    BANNED_USERS.add(target_user_id)
    save_banned_users()
    
    await update.message.reply_text(
        f"ЁЯЪл **User Banned**\n\n"
        f"ЁЯСд **User ID:** `{target_user_id}`\n"
        f"ЁЯУЭ **Reason:** {reason}",
        parse_mode=ParseMode.MARKDOWN
    )
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"ЁЯЪл **You have been banned from using this bot.**\n\n"
                f"**Reason:** {reason}\n\n"
                "Contact support for more information."
        )
    except:
        pass

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """рдХрд┐рд╕реА рдпреВрдЬрд░ рдХреЛ рдЕрдирдмреИрди рдХрд░реЗрдВ (Admin Only)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("тЪая╕П **рдЕрд╕реНрд╡реАрдХреГрдд!** рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    
    if not context.args:
        await update.message.reply_text("ЁЯУЭ **Usage:** `/unban <user_id>`", parse_mode=ParseMode.MARKDOWN)
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("тЭМ Invalid User ID.")
        return
    
    if target_user_id in BANNED_USERS:
        BANNED_USERS.remove(target_user_id)
        save_banned_users()
        await update.message.reply_text(f"тЬЕ User `{target_user_id}` рдХреЛ unban рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", parse_mode=ParseMode.MARKDOWN)
        
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text="тЬЕ **Good news!** рдЖрдкрдХреЛ unban рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред\n\n"
                    "рдЕрдм рдЖрдк рдмреЙрдЯ рдХрд╛ рджреЛрдмрд╛рд░рд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
            )
        except:
            pass
    else:
        await update.message.reply_text(f"тЭМ User `{target_user_id}` banned рдирд╣реАрдВ рд╣реИред", parse_mode=ParseMode.MARKDOWN)

# --- Button Handler (Updated for buy_unlimited_access) ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inline рдмрдЯрди рд╣реИрдВрдбрд▓рд░"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    save_user(user_id)
    bot_username = context.bot.username
    
    # рдЪреИрдирд▓ рдореЗрдВрдмрд░рд╢рд┐рдк рдЪреЗрдХ
    if query.data == 'check_membership':
        is_member = await check_channel_membership(user_id, context)
        if is_member:
            keyboard = [[InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "тЬЕ **рдзрдиреНрдпрд╡рд╛рдж!** ЁЯОЙ\n\n"
                "рдЖрдкрдиреЗ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИред\n\n"
                "рдЕрдм рдЖрдк рдмреЙрдЯ рдХрд╛ рдкреВрд░реА рддрд░рд╣ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!\n\n"
                "**рд╕рд░реНрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:**\n"
                "`/search <рдирдВрдмрд░>`\n"
                "**рдпрд╛ рд╕реАрдзреЗ рдирдВрдмрд░ рднреЗрдЬреЗрдВ**",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.answer("тЭМ рдЖрдк рдЕрднреА рднреА рдЪреИрдирд▓ рдХреЗ рдореЗрдВрдмрд░ рдирд╣реАрдВ рд╣реИрдВ! рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВред", show_alert=True)
        return
    
    if not await force_channel_join(update, context):
        return
    
    if is_banned(user_id) and query.data != 'main_menu':
        await query.answer("ЁЯЪл рдЖрдк рдмреИрди рд╣реИрдВред", show_alert=True)
        return
    
    if query.data == 'show_credits':
        current_credits = get_credits(user_id)
        is_unli = is_unlimited(user_id)
        credit_text = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unli else str(current_credits)
        referral_count = sum(1 for r in REFERRED_TRACKER if r[0] == user_id)
        
        expiry_info = ""
        if is_unli and user_id != ADMIN_ID:
            expiry_info = f"\nтП░ **рд╡реИрд▓рд┐рдбрд┐рдЯреА:** {get_unlimited_expiry_text(user_id)}"
        
        keyboard = [
            [InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", callback_data='get_referral_link')],
            [InlineKeyboardButton("ЁЯУК рд░реЗрдлрд░рд▓ рд╕реНрдЯреЗрдЯрд╕", callback_data='my_referrals')],
            [InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        credits_msg = (
            f"ЁЯТ░ **рдЖрдкрдХреЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕:** {credit_text}{expiry_info}\n"
            f"ЁЯФЧ **рдЖрдкрдХреЗ рд░реЗрдлрд░рд▓:** {referral_count}\n"
            f"ЁЯОБ **рд╣рд░ рд░реЗрдлрд░рд▓:** +{REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ\n\n"
        )
        
        if not is_unli:
            if current_credits <= 0:
                credits_msg += "тЪая╕П **рдХреНрд░реЗрдбрд┐рдЯ рдЦрддреНрдо!** рдЕрднреА рд░реЗрдлрд░ рдХрд░реЗрдВ рдФрд░ рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдВ!"
            elif current_credits <= 2:
                credits_msg += f"тЪая╕П **рдХрдо рдХреНрд░реЗрдбрд┐рдЯ рдмрдЪреЗ рд╣реИрдВ!** рдЬрд▓реНрджреА рд░реЗрдлрд░ рдХрд░реЗрдВред"
            else:
                credits_msg += f"тЬЕ рдЖрдк рдЕрднреА **{current_credits} рдмрд╛рд░** рд╕рд░реНрдЪ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
        
        await query.edit_message_text(credits_msg, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif query.data == 'get_referral_link':
        referral_link = get_referral_link(bot_username, user_id)
        referral_count = sum(1 for r in REFERRED_TRACKER if r[0] == user_id)
        total_earned = referral_count * REFERRAL_CREDITS
        current_credits = get_credits(user_id)
        credit_text = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unlimited(user_id) else str(current_credits)
        
        referral_message = (
            "ЁЯФЧ **рдЖрдкрдХрд╛ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ:**\n"
            f"`{referral_link}`\n\n"
            "ЁЯУЛ **рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ:**\n"
            "1я╕ПтГг рдКрдкрд░ рдХрд╛ рд▓рд┐рдВрдХ рдХреЙрдкреА рдХрд░реЗрдВ\n"
            "2я╕ПтГг рджреЛрд╕реНрддреЛрдВ рдХреЛ WhatsApp/Telegram рдкрд░ рднреЗрдЬреЗрдВ\n"
            f"3я╕ПтГг рдЬрдм рд╡реЗ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ, рдЖрдкрдХреЛ **{REFERRAL_CREDITS}** рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗрдВрдЧреЗ\n\n"
            "ЁЯУК **рдЖрдкрдХреА рд░реЗрдлрд░рд▓ рд╕реНрдЯреЗрдЯ:**\n"
            f"ЁЯСе **рдХреБрд▓ рд░реЗрдлрд░рд▓:** {referral_count}\n"
            f"ЁЯТ░ **рдХрдорд╛рдП рдХреНрд░реЗрдбрд┐рдЯ:** {total_earned}\n"
            f"ЁЯТО **рдореМрдЬреВрджрд╛ рдХреНрд░реЗрдбрд┐рдЯ:** {credit_text}"
        )
        
        share_text = f"ЁЯФН Number Search Bot - рдХрд┐рд╕реА рднреА рдирдВрдмрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкрд╛рдПрдВ!\n\n{referral_link}"
        encoded_text = requests.utils.quote(share_text)
        
        keyboard = [
            [InlineKeyboardButton("ЁЯТм WhatsApp рдкрд░ рд╢реЗрдпрд░ рдХрд░реЗрдВ", url=f"https://wa.me/?text={encoded_text}")],
            [InlineKeyboardButton("ЁЯУд Telegram рдкрд░ рд╢реЗрдпрд░ рдХрд░реЗрдВ", url=f"https://t.me/share/url?url={referral_link}&text=Try this bot!")],
            [InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдБ", callback_data='show_credits')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(referral_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # тнР рдпрд╣рд╛рдВ buy_unlimited_access рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ тнР
    elif query.data == 'buy_unlimited_access':
        # рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕ рдмрдЯрди
        keyboard = [
            [InlineKeyboardButton("ЁЯСС Owner рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", url=f"https://t.me/{ADMIN_USERNAME_FOR_ACCESS}")],
            [InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ЁЯСС **рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕ рдкрд╛рдПрдВ**\n\n"
            "ЁЯЪА рдмрд┐рдирд╛ рдХрд┐рд╕реА рдХреНрд░реЗрдбрд┐рдЯ рд▓рд┐рдорд┐рдЯ рдХреЗ рд╕рд░реНрдЪ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?\n"
            "ЁЯФе **рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕** рдЦрд░реАрджреЗрдВ!\n\n"
            "ЁЯСЗ **рдЦрд░реАрджрдиреЗ рдХреЗ рд▓рд┐рдП:**\n"
            f"рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ **Owner (@{ADMIN_USERNAME_FOR_ACCESS})** рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ рдФрд░ рдкреЗрдореЗрдВрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред\n\n"
            "ЁЯТО **рдЖрдкрдХрд╛ рд╡рд░реНрддрдорд╛рди рд╕реНрдЯреЗрдЯрд╕:**\n"
            f"тАв **рдХреНрд░реЗрдбрд┐рдЯ:** {'рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П' if is_unlimited(user_id) else str(get_credits(user_id))}",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    elif query.data == 'my_referrals':
        referral_count = sum(1 for r in REFERRED_TRACKER if r[0] == user_id)
        total_earned = referral_count * REFERRAL_CREDITS
        
        referral_counts = {}
        for ref_id, _ in REFERRED_TRACKER:
            referral_counts[ref_id] = referral_counts.get(ref_id, 0) + 1
        
        sorted_referrers = sorted(referral_counts.items(), key=lambda x: x[1], reverse=True)
        user_rank = next((i+1 for i, (uid, _) in enumerate(sorted_referrers) if uid == user_id), "N/A")
        
        keyboard = [
            [InlineKeyboardButton("ЁЯОБ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рдкрд╛рдПрдВ", callback_data='get_referral_link')],
            [InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"ЁЯУК **рдЖрдкрдХреА рд░реЗрдлрд░рд▓ рд╕реНрдЯреЗрдЯрд┐рд╕реНрдЯрд┐рдХреНрд╕**\n\n"
            f"ЁЯСе **рдХреБрд▓ рд░реЗрдлрд░рд▓:** {referral_count}\n"
            f"ЁЯТ░ **рдХреБрд▓ рдХрдорд╛рдП рдХреНрд░реЗрдбрд┐рдЯ:** {total_earned}\n"
            f"ЁЯОБ **рдкреНрд░рддрд┐ рд░реЗрдлрд░рд▓:** {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ\n"
            f"ЁЯПЖ **рдЖрдкрдХреА рд░реИрдВрдХ:** #{user_rank}\n\n"
            "ЁЯТб **рдЯрд┐рдк:** рдЬрд┐рддрдиреЗ рдЬреНрдпрд╛рджрд╛ рд░реЗрдлрд░ рдХрд░реЗрдВрдЧреЗ, рдЙрддрдиреЗ рдЬреНрдпрд╛рджрд╛ рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓реЗрдВрдЧреЗ! ЁЯЪА",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'search_history':
        if user_id not in USER_SEARCH_HISTORY or not USER_SEARCH_HISTORY[user_id]:
            keyboard = [[InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "ЁЯУЬ **рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА рдЦрд╛рд▓реА рд╣реИ**\n\n"
                "рдЖрдкрдиреЗ рдЕрднреА рддрдХ рдХреЛрдИ рд╕рд░реНрдЪ рдирд╣реАрдВ рдХреА рд╣реИред\n\n"
                "рд╕рд░реНрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:\n"
                "`/search <рдирдВрдмрд░>`",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        history = USER_SEARCH_HISTORY[user_id][-10:]
        history_text = "ЁЯУЬ **рдЖрдкрдХреА рдЖрдЦрд┐рд░реА 10 рд╕рд░реНрдЪ:**\n\n"
        
        for idx, search in enumerate(reversed(history), 1):
            number = search['number']
            timestamp = datetime.fromisoformat(search['timestamp']).strftime('%d-%m-%Y %H:%M')
            history_text += f"{idx}. `{number}` - {timestamp}\n"
        
        keyboard = [
            [InlineKeyboardButton("ЁЯЧСя╕П рд╣рд┐рд╕реНрдЯреНрд░реА рд╕рд╛рдл рдХрд░реЗрдВ", callback_data='clear_history')],
            [InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(history_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif query.data == 'clear_history':
        if user_id in USER_SEARCH_HISTORY:
            USER_SEARCH_HISTORY[user_id] = []
            save_data()
        
        keyboard = [[InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "тЬЕ **рд╣рд┐рд╕реНрдЯреНрд░реА рд╕рд╛рдл рдХрд░ рджреА рдЧрдИ рд╣реИ!**",
            reply_markup=reply_markup
        )
    
    elif query.data == 'how_to_search':
        keyboard = [[InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ЁЯФН **рдирдВрдмрд░ рдХреИрд╕реЗ рд╕рд░реНрдЪ рдХрд░реЗрдВ:**\n\n"
            "**рддрд░реАрдХрд╛ 1:** Command рд╕реЗ\n"
            "`/search 9798423774`\n\n"
            "**рддрд░реАрдХрд╛ 2:** рд╕реАрдзреЗ рдирдВрдмрд░ рднреЗрдЬреЗрдВ\n"
            "`9798423774`\n\n"
            "ЁЯУМ **рдиреЛрдЯ:**\n"
            "тАв рд╣рд░ рд╕рд░реНрдЪ рдореЗрдВ 1 рдХреНрд░реЗрдбрд┐рдЯ рд▓рдЧрддрд╛ рд╣реИ\n"
            "тАв 10 рдЕрдВрдХреЛрдВ рдХрд╛ mobile number рдбрд╛рд▓реЗрдВ",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'help':
        keyboard = [[InlineKeyboardButton("ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "тД╣я╕П **рдорджрдж рдФрд░ рдЬрд╛рдирдХрд╛рд░реА**\n\n"
            "**ЁЯУ▒ рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдбреНрд╕:**\n"
            "тАв `/start` - рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ\n"
            "тАв `/search <рдирдВрдмрд░>` - рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░реЗрдВ\n\n"
            "**ЁЯТ░ рдХреНрд░реЗрдбрд┐рдЯ рд╕рд┐рд╕реНрдЯрдо:**\n"
            f"тАв рд╢реБрд░реБрдЖрдд рдореЗрдВ {DAILY_CREDITS_LIMIT} рдлреНрд░реА рдХреНрд░реЗрдбрд┐рдЯ\n"
            f"тАв рд╣рд░ рд░реЗрдлрд░рд▓ рдкрд░ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ\n"
            "тАв рд╣рд░ рд╕рд░реНрдЪ рдореЗрдВ 1 рдХреНрд░реЗрдбрд┐рдЯ рдЦрд░реНрдЪ\n"
            "тАв рд░реЗрдлрд░рд▓ рдХреА рдХреЛрдИ рд▓рд┐рдорд┐рдЯ рдирд╣реАрдВ!\n\n"
            f"**ЁЯУв рд╕рдкреЛрд░реНрдЯ:** @{SUPPORT_CHANNEL_USERNAME}",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'main_menu':
        current_credits = get_credits(user_id)
        is_unli = is_unlimited(user_id)
        credit_text = "рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб тЩ╛я╕П" if is_unli else str(current_credits)
        username = query.from_user.first_name or "friend"
        unlimited_badge = " ЁЯСС" if is_unli else ""
        
        expiry_text = ""
        if is_unli and user_id != ADMIN_ID:
            expiry_text = f"\nтП░ **рд╡реИрд▓рд┐рдбрд┐рдЯреА:** {get_unlimited_expiry_text(user_id)}"
        
        keyboard = [
            [
                InlineKeyboardButton("ЁЯФН рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░реЗрдВ", callback_data='how_to_search'),
                InlineKeyboardButton(f"ЁЯОБ {REFERRAL_CREDITS} рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛рдПрдБ", callback_data='get_referral_link')
            ],
            [
                InlineKeyboardButton(f"ЁЯТ░ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ ({credit_text})", callback_data='show_credits'),
                InlineKeyboardButton("ЁЯУК рдореЗрд░реА рд░реЗрдлрд░рд▓", callback_data='my_referrals')
            ],
            [
                InlineKeyboardButton("ЁЯУЬ рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА", callback_data='search_history'),
                InlineKeyboardButton("ЁЯСС рдЕрдирд▓рд┐рдорд┐рдЯреЗрдб рдПрдХреНрд╕реЗрд╕", callback_data='buy_unlimited_access')
            ],
            [
                InlineKeyboardButton("ЁЯУв Support Channel", url=SUPPORT_CHANNEL_LINK)
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = (
            f"ЁЯдЦ **рдирдорд╕реНрддреЗ {username}{unlimited_badge}!**\n"
            f"рдореИрдВ рдЖрдкрдХрд╛ рдПрдбрд╡рд╛рдВрд╕реНрдб рдирдВрдмрд░ рд╕рд░реНрдЪ рдмреЙрдЯ рд╣реВрдБред ЁЯЪА\n\n"
            f"ЁЯТО **рдЖрдкрдХреЗ рдХреНрд░реЗрдбрд┐рдЯреНрд╕:** {credit_text}{expiry_text}\n\n"
            "тЬи **рдореБрдЦреНрдп рдлреАрдЪрд░реНрд╕:**\n"
            "тАв ЁЯФН рдХрд┐рд╕реА рднреА рдирдВрдмрд░ рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА\n"
            f"тАв ЁЯОБ рд░реЗрдлрд░рд▓ рдХрд░рдХреЗ рдлреНрд░реА рдХреНрд░реЗрдбрд┐рдЯ ({REFERRAL_CREDITS} / рд░реЗрдлрд░рд▓)\n"
            "тАв ЁЯУК рдЕрдкрдиреА рд╕рд░реНрдЪ рд╣рд┐рд╕реНрдЯреНрд░реА рджреЗрдЦреЗрдВ\n"
            "тАв тЪб рддреЗрдЬрд╝ рдФрд░ рд╕рдЯреАрдХ рд░рд┐рдЬрд▓реНрдЯреНрд╕\n\n"
            "ЁЯСЗ **рд╢реБрд░реБрдЖрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХреЗ рдмрдЯрди рджрдмрд╛рдПрдВ**"
        )
        
        await query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    # Admin Buttons (no change)
    elif query.data == 'admin_stats' and user_id == ADMIN_ID:
        # Re-running the command to refresh the stats message
        await stats_command(update.callback_query.message, context)
    
    elif query.data == 'admin_top_users' and user_id == ADMIN_ID:
        referral_counts = {}
        for ref_id, _ in REFERRED_TRACKER:
            referral_counts[ref_id] = referral_counts.get(ref_id, 0) + 1
        
        sorted_referrers = sorted(referral_counts.items(), key=lambda x: x[1], reverse=True)[:10]
        
        top_users_text = "ЁЯПЖ **Top 10 Referrers:**\n\n"
        for idx, (uid, count) in enumerate(sorted_referrers, 1):
            emoji = "ЁЯеЗ" if idx == 1 else "ЁЯеИ" if idx == 2 else "ЁЯеЙ" if idx == 3 else f"{idx}я╕ПтГг"
            top_users_text += f"{emoji} User `{uid}` - {count} рд░реЗрдлрд░рд▓\n"
        
        keyboard = [[InlineKeyboardButton("ЁЯФЩ Back to Stats", callback_data='admin_stats')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(top_users_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif query.data == 'admin_unlimited_list' and user_id == ADMIN_ID:
        if not UNLIMITED_USERS:
            keyboard = [[InlineKeyboardButton("ЁЯФЩ Back to Stats", callback_data='admin_stats')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "ЁЯСС **Unlimited Users List:**\n\nNo unlimited users found.",
                reply_markup=reply_markup
            )
            return
        
        unlimited_text = "ЁЯСС **Unlimited Users List:**\n\n"
        for uid, expiry in list(UNLIMITED_USERS.items())[:20]:
            if expiry == "forever":
                expiry_str = "Forever тЩ╛я╕П"
            else:
                try:
                    expiry_date = datetime.fromtimestamp(expiry)
                    expiry_str = expiry_date.strftime('%d-%m-%Y %H:%M')
                except:
                    expiry_str = "Invalid Date"

            unlimited_text += f"тАв User `{uid}` - {expiry_str}\n"
        
        if len(UNLIMITED_USERS) > 20:
            unlimited_text += f"\n... and {len(UNLIMITED_USERS) - 20} more"
        
        keyboard = [[InlineKeyboardButton("ЁЯФЩ Back to Stats", callback_data='admin_stats')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(unlimited_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif query.data == 'admin_banned_list' and user_id == ADMIN_ID:
        if not BANNED_USERS:
            keyboard = [[InlineKeyboardButton("ЁЯФЩ Back to Stats", callback_data='admin_stats')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "ЁЯЪл **Banned Users List:**\n\nNo banned users found.",
                reply_markup=reply_markup
            )
            return
        
        banned_text = "ЁЯЪл **Banned Users List:**\n\n"
        for uid in list(BANNED_USERS)[:30]:
            banned_text += f"тАв User `{uid}`\n"
        
        if len(BANNED_USERS) > 30:
            banned_text += f"\n... and {len(BANNED_USERS) - 30} more"
        
        keyboard = [[InlineKeyboardButton("ЁЯФЩ Back to Stats", callback_data='admin_stats')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(banned_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def set_bot_commands(application: Application) -> None:
    """рдмреЙрдЯ commands рд╕реЗрдЯ рдХрд░реЗрдВ"""
    commands = [
        BotCommand("start", "ЁЯЪА Start the bot"),
        BotCommand("search", "ЁЯФН Search a number"),
    ]
    
    await application.bot.set_my_commands(commands)
    logger.info("тЬЕ Bot commands set successfully")

async def post_init(application: Application) -> None:
    """Initialization рдХреЗ рдмрд╛рдж рдЪрд▓рд╛рдПрдВ"""
    await set_bot_commands(application)
    
    if ADMIN_ID:
        try:
            await application.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"тЬЕ **Bot Started Successfully!**\n\n"
                    f"ЁЯСе Total Users: {len(USERS)}\n"
                    f"ЁЯСС Unlimited Users: {len(UNLIMITED_USERS)}\n"
                    f"ЁЯЪл Banned Users: {len(BANNED_USERS)}\n"
                    f"ЁЯФЧ Referral Credit: {REFERRAL_CREDITS}\n"
                    f"тП░ Time: {datetime.now().strftime('%d-%m-%Y %H:%M:%S')}",
                parse_mode=ParseMode.MARKDOWN
            )
        except:
            pass

def main() -> None:
    """рдореБрдЦреНрдп рдлрдВрдХреНрд╢рди"""
    if not BOT_TOKEN:
        print("тЭМ ERROR: BOT_TOKEN is not set in environment variables.")
        return
    
    if ADMIN_ID is None:
        print("тЪая╕П WARNING: ADMIN_ID is not set. Admin commands will not work.")
    
    load_data()
    load_banned_users()
    
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("search", search_command))
    
    # Admin Commands
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("unlimited", unlimited_command))
    application.add_handler(CommandHandler("remove_unlimited", remove_unlimited_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("addcredits", add_credits_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("=" * 50)
    print("тЬЕ ADVANCED BOT IS RUNNING")
    print("=" * 50)
    print(f"ЁЯСд Admin ID: {ADMIN_ID}")
    print(f"ЁЯУв Channel: @{SUPPORT_CHANNEL_USERNAME}")
    print(f"ЁЯОБ Referral Credit: {REFERRAL_CREDITS}")
    print(f"ЁЯСе Total Users: {len(USERS)}")
    print(f"ЁЯСС Unlimited Users: {len(UNLIMITED_USERS)}")
    print(f"ЁЯЪл Banned Users: {len(BANNED_USERS)}")
    print(f"ЁЯФЧ Total Referrals: {len(REFERRED_TRACKER)}")
    print(f"ЁЯФН Total Searches: {DAILY_STATS.get('searches', 0)}")
    print(f"тП░ Started at: {datetime.now().strftime('%d-%m-%Y %H:%M:%S')}")
    print("=" * 50)
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
